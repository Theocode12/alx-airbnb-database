#!/bin/python3

import random, uuid
from datetime import date, timedelta

SEQ = 0
F_STORE = {}


def make_random_inserts(table_name, col_names, types, no_of_records, save_to_file=True):
    global SEQ
    SEQ = 0
    if len(col_names) != len(types):
        raise Exception("types and must match columns count")
    for typ in types:
        if (
            typ not in ["number", "string", "uuid", "name", "email", "date", "foreign"]
            and not typ.startswith("enum")
            and not typ.startswith("string")
            and not typ.startswith("number")
            and not typ.startswith("foreign")
        ):
            raise Exception(f"unknown type {typ}")
    stmt = f"""INSERT INTO {table_name} ({','.join(col_names)})
  \tVALUES """
    save_seq = SEQ
    for _ in range(no_of_records):
        values = "("
        value_list = []

        for typ in types:
            value_list.append(f"'{make_random_value_from_type(typ, table_name)}'")

        values += ",".join(value_list) + "), "
        stmt += "\t" + values + "\n"
    stmt = stmt[: len(stmt) - 3] + ";"
    SEQ = save_seq
    if save_to_file:
        file_name = table_name + f"_insert_{no_of_records}_stmt.sql"
        with open(file_name, "w") as file:
            file.write(
                f"# this script contains random values and was autogenerated\n{stmt}"
            )
    return stmt


def get_random_numbers(length, start=0, stop=9):
    num = ""
    for _ in range(length):
        num += str(random.randint(start, stop))
    return int(num)


def make_random_value_from_type(typ, table_name):
    global SEQ, F_STORE
    if typ == "string":
        return get_random_text(4, 10, False, False)
    if typ == "number":
        SEQ += 1
        return f"{SEQ}"

    if typ.startswith("number") and ":" in typ:
        meta = typ.split(":")[1:]
        if (meta) and (len(meta) == 0):
            raise ValueError(
                "Please put meta \nSyntax - number:length[:{int | string}]"
            )
        length = int(meta[0])
        no_type = meta[1] if len(meta) > 1 else int
        if len(meta) > 2:
            try:
                start = int(meta[2])
                stop = int(meta[3])
            except:
                raise ValueError(
                    "Please indicate stop. If stop is Indicated Please make sure it is a number.  \nSyntax - number:length[:{int | string}[:start:stop]]"
                )
            num = get_random_numbers(length, start, stop)
        else:
            num = get_random_numbers(length)
        return str(num) if no_type == "string" else num

    if typ.startswith("string") and ":" in typ:
        length = int(typ.split(":")[1])
        if len(typ.split(":")) == 3:  # use punctuations and space
            return get_random_text(length, length, True, True)
        return get_random_text(length, length, False, False)
    if typ.startswith("enum"):
        enum = typ.split(":")[1:]
        random.shuffle(enum)
        return enum[0]

    if typ == "uuid":
        table_id = uuid.uuid4()
        tbl_cln_name = table_name + "_id"
        if tbl_ids := F_STORE.get(tbl_cln_name) and (
            ids := F_STORE.get(tbl_cln_name).get("ids")
        ):
            ids.append(f"{table_id}")
        else:
            ids = F_STORE.get(tbl_cln_name) or {"ids": []}
            ids["ids"].append(f"{table_id}")
            F_STORE[tbl_cln_name] = ids
        return f"{table_id}"

    if typ == "name":
        return (
            get_random_text(4, 10, False, False)
            + " "
            + get_random_text(4, 10, False, False)
        )
    if typ == "email":
        return get_random_text(8, 18, False, False) + "@" + "mail.com"
    if typ == "date":
        start_date = date(2020, 1, 1)
        end_date = date(2025, 1, 1)
        random_days = random.randint(0, (end_date - start_date).days)
        return (start_date + timedelta(days=random_days)).isoformat()

    if typ.startswith("foreign"):
        foriegn_meta = typ.split(":")[1:]
        if len(foriegn_meta) == 0:
            raise ValueError(
                "please enter table name for foreign type. \nSyntax - foreign:tbl_name[:strict]\nstrict mode(optional) enforces one to one relationship"
            )
        foriegn_tbl = foriegn_meta[0]
        strict = (len(foriegn_meta) > 1) and (foriegn_meta[1] == "strict")
        foriegn_tbl_data = F_STORE.get(f"{foriegn_tbl}_id")
        if foriegn_tbl_data is None:
            raise ValueError(f"{foriegn_tbl} with {foriegn_tbl}_id does not exists")
        foriegn_ids = foriegn_tbl_data.get("ids")
        random_idx = random.randrange(len(foriegn_ids))
        if strict:
            if foriegn_tbl_data.get("used") is None:
                foriegn_tbl_data["used"] = [foriegn_ids[random_idx]]
            elif len(foriegn_tbl_data["used"]) == len(foriegn_ids):
                raise ValueError("All for foreign key has been used")
            elif foriegn_ids[random_idx] not in foriegn_tbl_data["used"]:
                foriegn_tbl_data["used"].append(foriegn_ids[random_idx])
            else:
                difference = list(set(foriegn_ids) - set(foriegn_tbl_data["used"]))
                first_unused_id = difference[0]
                random_idx = foriegn_ids.index(first_unused_id)
                foriegn_tbl_data["used"].append(foriegn_ids[random_idx])

        return foriegn_ids[random_idx]

    raise Exception("unknown type")


def get_random_text(
    min_chars_len, max_chars_len, use_punctuations=True, use_space=True
):
    consonants = "bcdfghjklmnpqrstvwxyz"
    vowels = "aeiou"

    char_types = [consonants, vowels]
    char_type_history = []

    def get_next_char():
        nonlocal char_type_history
        type_index = random.randint(0, len(char_types) - 1)

        if (
            len(char_type_history) > 1
            and char_type_history[-1] == char_type_history[-2]
        ):
            type_index = 1 - char_type_history[-1]  # Switch between 0 and 1

        char_type_history.append(type_index)
        current_char_type = char_types[type_index]
        return random.choice(current_char_type)

    def capitalize(text, index=0):
        if index < len(text):
            return text[:index] + text[index].upper() + text[index + 1 :]
        return text.capitalize()

    min_word_len = 1
    max_word_len = 12

    current_word_len = max(random.randint(1, max_word_len), min_word_len)
    total_chars_len = max(random.randint(1, max_chars_len), min_chars_len)

    punctuations = [".", ",", "!"]
    word = ""
    words = []

    for _ in range(total_chars_len):
        word += get_next_char()

        if not use_space:
            if _ == total_chars_len - 1:
                words.append(word)
            continue

        if len(word) == current_word_len:
            words.append(word)
            word = ""
            if len(words) % 2 == 0 and random.random() > 0.7 and use_punctuations:
                words.append(random.choice(punctuations))
            char_type_history = []
            current_word_len = max(random.randint(1, max_word_len), min_word_len)

    text = " ".join(words).replace(" .", ".").replace(" ,", ",")

    if "." in text:
        text = ".".join([capitalize(sentence, 1) for sentence in text.split(".")])

    return text


if __name__ == "__main__":
    make_random_inserts(
        "user",
        [
            "user_id",
            "first_name",
            "last_name",
            "email",
            "password_hash",
            "phone_number",
            "role",
        ],
        [
            "uuid",
            "string",
            "string",
            "email",
            "string:35",
            "number:11:string",
            "enum:guest:host:admin",
        ],
        6000,
    )

    make_random_inserts(
        "property",
        ["property_id", "host_id", "name", "description", "location", "pricepernight"],
        [
            "uuid",
            "foreign:user",
            "string:10",
            "string:30:add_punct",
            "string:50:add_punct",
            "number:3:int:0:9",
        ],
        8000,
    )

    make_random_inserts(
        "booking",
        ["booking_id", "property_id", "user_id", "start_date", "end_date", "status"],
        [
            "uuid",
            "foreign:property",
            "foreign:user",
            "date",
            "date",
            "enum:pending:confirmed:canceled",
        ],
        7500,
    )

    make_random_inserts(
        "payment",
        ["payment_id", "booking_id", "amount", "payment_date", "payment_method"],
        [
            "uuid",
            "foreign:booking:strict",
            "number:3",
            "date",
            "enum:credit_card:paypal:stripe",
        ],
        7000,
    )

    make_random_inserts(
        "review",
        ["review_id", "property_id", "user_id", "rating", "comment"],
        ["uuid", "foreign:property", "foreign:user", "number:1:int:1:5", "string:30"],
        4500,
    )

    make_random_inserts(
        "message",
        ["message_id", "sender_id", "recipient_id", "message_body"],
        ["uuid", "foreign:user", "foreign:user", "string:30:add_punct"],
        5500,
    )
